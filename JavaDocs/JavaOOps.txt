OOPs( Object-Oriented Programming System)

OOP is a methodology or paradigm to design a program using classes and objects.

Important concepts:

  1) Objects		
  2) Classes		: trivial 
  3) Inheritance	: done 
  4) Polymorphism	: done
  5) Encapsulation 	: done
  6) Abstract Classes	: done 
  7) Inner Classes 
  8) Anonym Classes

Other used therms:

  1) Coupling 
  2) Cohesion
  3) Association 
  4) Aggregation 
  5) Composition


Inheritance :

 - Object A acquires properties and behaviours of parent object.
 - Provides code reusability and prevents redundancy 

Polymorphism :

 - Lets us use inherited methods in different ways
 - it is distinguished between static and dynamic polymorphism
 - Method names doesn't change 

 - static :
	1) Overloading methods
	2) methods have are at its core the same behaviour, maybe just other/ more arguments
	
	print(String name)  -> print(String name, int age , ... )
        
 - dynamic :
	1) Overriding methods
	2) Methods are implemented differently and interpreted during runtime 


 - both is realised via the "@Overriding/ @Overloading" annotations  

Encapsulation:

 - also known as Data-hiding
 - Class variables are private and only accessible through given methods e.g Setter/Getter

Interface : 

 - defines a wanted structure / what a class has to do 
 - starts with keyword : interface <name_of_Interface>
 - declares constant fields and and methods that are abstract
 - class IMPLEMENTS an Interface
 - all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public

Abstract Classes :

 - Serve as Superclasses and can NOT be instantiated [ but can be subclassed ] 
 - Defines certain characteristics and abilities which are defined more in detail in their subclasses 
  
 Guidelines:

   1) Class declaration starts with keyword Abstract 
   2) Behaviour of abstract methods is NOT implemented 
   3) Keyword abstract {for methods/ Variables etc. } is ONLY allowed in combination with the modifiers : Public and Protected 
   4) however they can include eg. final variables and implemented methods. ( But without the keyword Abstract ) 
 
Extends vs Implements 

 - Class A implements Interface B
 - Class A extends AbstractClass B

